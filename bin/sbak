#!/usr/local/bin/bash
# stephan@okroshka.net (https://github.com/venera-13)
# bash argument parsing powered by https://argbash.io
# sbak - simple backups for UNIX
version="1.1"
starttime=$(date +%s)

main() {
	# Parse commandline arguments, print help, catch user input, etc...
	parse_commandline "$@"

	log info "Starting sbak - simple backups for UNIX version $version"

	# Load the configfile and set variables
	# sbak.conf defaults to /etc/sbak.conf and is overridden by commandline argument -c
	if [ -f $_arg_config ]; then
		log info "Parsing configuration stored in: $_arg_config"
		. $_arg_config
	else
		log warn "Configuration file $_arg_config not found. Using command-line parameters."
	fi

	# Load variables from commandline arguments. Exit if any variable is left unset after this stage
	for cmdarg in {_arg_includesdir,_arg_backupdir,_arg_prune,_arg_remote}; do
		appliedVar=$(echo $cmdarg | cut -d_ -f3-)
		if [ ! -z ${!cmdarg} ]; then
			eval $appliedVar=${!cmdarg}
		fi

		if [ -z ${!appliedVar} ]; then
			log error "Configuration parameter $appliedVar is unset. Check your config file or commandline arguments. Exiting."
			exit 1
		fi
	done

	# Parse .sbak files and create the backup
	# Future versions will add option to skip this to be able to prune without making a backup
	createBackup

	# Start remote copy and/or pruning when enabled in the config or cmdline arguments
	if [ "$remote" = "on" ]; then copyremote; fi
	if [ "$prune" = "on" ]; then prune; fi

	log info "sbak backup run finished in $(($(date +%s)-$starttime)) seconds"
}

createBackup() {
	# Load items to backup from one or more .sbak files present in the includes directory
	# Exit if no items to backup are found or no .sbak files are found.
	filestobackup="$(cat $includesdir/*.sbak | grep -v '#')"
	if [ $? -ne 0 ]; then
		log error "Problem reading .sbak files in $includesdir or no items found to backup. Exiting."
		exit 1
	fi
	log info "Parsed $(echo "$filestobackup" | wc -l | tr -d ' ') items from .sbak files in $includesdir"

	# Create the backup tarball
	# Exit if backup was not created, warn when tar returns errors.
	timestamp=$(date '+%Y-%m-%d_%T')
	backupfile=$backupdir/$timestamp.tar.gz
	log info "Creating tarball as user $(id -un) with UID $(id -u)"
	tar -czf $backupfile $filestobackup 2>> $logfile_path
	if [ $? -ne 0 ]; then
		log warn "The tar command exited with a non-0 value. Check your logs at: $logfile_path"
	fi

	if [ ! -f $backupfile ]; then
		log error "Backup $backupfile could not be created. Exiting."
		exit 1
	fi

	log info "Created backup $backupfile with size $(du -h $backupfile | cut -f1)"
}

log() {
	# serverity: info, warn, error
	local severity="$1"
	local message="$2"

	echo "$(date '+%Y-%m-%d %T') $severity $message"

	# Print to syslogs local1 facility. Also shows up in journalctl
	if [ "$syslog" = "on" ]; then
		logger -t sbak -p local1.$severity $message
	fi

	# Log to filesystem
	if [ "$logfile" = "on" ]; then
		touch $logfile_path
		if [ $? -ne 0 ]; then
			echo "$(date '+%Y-%m-%d %T') error Failed to write to logfile $logfile_path. Exiting."
			exit 1
		fi
			echo "$(date '+%Y-%m-%d %T') $severity $message" >> $logfile_path
	fi
}

prune() {
	local backups_removed=0
	log info "Starting pruning of old backups"

	if [ ! -d "$backupdir" ]; then
		log error "Backup directory $backupdir not found or inaccessable. Exiting."
		exit 1
	fi

	# Remove backups older than specified in $prune_maxage
	if [ $prune_maxage -ne 0 ]; then
		log info "Looking for backups older than $prune_maxage days"
		local oldfiles=$(find $backupdir -type f -mtime +$prune_maxage)
		if [ $(echo $oldfiles | wc -w) -gt 0 ]; then
			log info "Found $(echo $oldfiles | wc -w) backups older than $prune_maxage days"
			for file in $oldfiles; do
				log info "Removing old backup: $file"
				rm -f $file
				((backups_removed++))
			done
		fi
	fi

	# Remove surplus backups more than specified in $prune_maxnumber
	if [ $prune_maxnumber -ne 0 ]; then
		log info "Looking for backups in excess of $prune_maxnumber"
		local numbackupsfound=$(find $backupdir -type f | wc -l)
		if [ $numbackupsfound -gt $prune_maxnumber ]; then
			log info "Found a surplus of $(($numbackupsfound-$prune_maxnumber)) backups"
		fi
		while [ $(find $backupdir -type f | wc -l) -gt $prune_maxnumber ]; do
			local filetoremove=$(ls -dt $backupdir/* | tail -1)
			log info "Removing surplus backup: $filetoremove"
			rm -f $filetoremove
			((backups_removed++))
		done
	fi

	# Remove backups when disk usage specified in $prune_maxsize is exceeded, starting with oldest backups
	if [ $prune_maxsize -ne 0 ]; then
		log info "Looking for combined backup diskusage exceeding $prune_maxsize kilobytes"
		local totalbackupsize=$(du -k -s $backupdir | cut -f1)
		if [ $totalbackupsize -gt $prune_maxsize ]; then
			log info "Maximum backup size of $prune_maxsize kilobytes exceeded by $(($totalbackupsize-$prune_maxsize)) kilobytes"
		fi

		while [ $(du -k -s $backupdir | cut -f1) -gt $prune_maxsize ]; do
			if [ $(find $backupdir -type f | wc -l) -eq 1 ]; then
				log error "Maximum backup size of $prune_maxsize KB exceeded but only one backup remaining. Will not remove. Check your diskspace!"
				break
			fi

			filetoremove=$(ls -dt $backupdir/* | tail -1)
			log info "Removing backup to free space: $filetoremove"
			rm -f $filetoremove
			((backups_removed++))
		done
	fi
	log info "Finished pruning of old backups. Removed $backups_removed old backups"
}

copyremote() {
	if [ ! -f $backupfile ]; then
		log error "Backup file to be copied over ssh $backupfile not found or inaccessable. Exiting."
		exit 1
	fi

	log info "Copying $backupfile over ssh to $remote_server as user $remote_user"
	if [ $(scp $backupfile $remote_user@$remote_server:$remote_path) ]; then
		log info "Copying $backupfile to $remote_server finished"
	else
		log error "Something went wrong copying $backupfile to $remote_server over ssh. Exiting."
		exit 1
	fi
}

print_help() {
	printf '%s\n' "sbak: simple backups for UNIX"
	printf 'Usage: %s [-c|--config <arg>] [-i|--includesdir <arg>] [-b|--backupdir <arg>] [-p|--(no-)prune] [-r|--(no-)remote] [-v|--version] [-h|--help]\n' "$0"
	printf '\t%s\n' "-c, --config: The sbak.conf configuration file (default: '/etc/sbak.conf')"
	printf '\t%s\n' "-i, --includesdir: The directory containing the .sbak include files"
	printf '\t%s\n' "-b, --backupdir: The directory where sbak writes the backups"
	printf '\t%s\n' "-p, --prune, --no-prune: Set pruning of old backups. Requires additional config in sbak.conf"
	printf '\t%s\n' "-r, --remote, --no-remote: Set copying backup to remote server. Requires additional config in sbak.conf"
	printf '\t%s\n' "-v, --version: Prints version"
	printf '\t%s\n' "-h, --help: Prints help"
}

die() {
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}

begins_with_short_option() {
	local first_option all_short_options='cibprvh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

parse_commandline()
{
	# THE DEFAULTS INITIALIZATION - OPTIONALS
	_arg_config="/etc/sbak.conf"
	_arg_includesdir=
	_arg_backupdir=
	_arg_prune=""
	_arg_remote=""

	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-c|--config)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_config="$2"
				shift
				;;
			--config=*)
				_arg_config="${_key##--config=}"
				;;
			-c*)
				_arg_config="${_key##-c}"
				;;
			-i|--includesdir)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_includesdir="$2"
				shift
				;;
			--includesdir=*)
				_arg_includesdir="${_key##--includesdir=}"
				;;
			-i*)
				_arg_includesdir="${_key##-i}"
				;;
			-b|--backupdir)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_backupdir="$2"
				shift
				;;
			--backupdir=*)
				_arg_backupdir="${_key##--backupdir=}"
				;;
			-b*)
				_arg_backupdir="${_key##-b}"
				;;
			-p|--no-prune|--prune)
				_arg_prune="on"
				test "${1:0:5}" = "--no-" && _arg_prune="off"
				;;
			-p*)
				_arg_prune="on"
				_next="${_key##-p}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					{ begins_with_short_option "$_next" && shift && set -- "-p" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			-r|--no-remote|--remote)
				_arg_remote="on"
				test "${1:0:5}" = "--no-" && _arg_remote="off"
				;;
			-r*)
				_arg_remote="on"
				_next="${_key##-r}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					{ begins_with_short_option "$_next" && shift && set -- "-r" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			-v|--version)
				echo sbak: simple backups for UNIX - version $version
				exit 0
				;;
			-v*)
				echo sbak: simple backups for UNIX - version $version
				exit 0
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
				;;
		esac
		shift
	done
}

main "$@"
exit 0
